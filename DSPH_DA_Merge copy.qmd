---
title: "So you want to: merge your data sets"
---

# Why you want to do it: 

Often times we are interested in exploring connections among variables from different sources. Merging your data files can be a way of collecting all the variables of interest so you can explore research questions and hypotheses about the data.

In addition, merging can be used to label your observations.  We go through examples below.

# What merging is:

Merging joins columns from two or more data frames based on matching row information across the data frames.

<img src="./mergeEx.png" align="center" width="800px"/>


# What merging isn't:

Merging isn't about joining data frames by *rows*.  Instead row binding is what you need if you have two data frames with the exact same variables (columns) that you want to join in one data frame.  For this, try the `rbind()` function in base R. 

<img src="./rbindEx.png" align="center" width="800px"/>


# How you can do it: 

There are a number of different ways of merging files in R.  For these examples, let's consider two data frames:

```{r echo = FALSE}

rm(list=ls())
set.seed(45)
n<-20
ID <- paste("id", sample(c(20:40), n, replace = FALSE), sep="")
Day <- c(1,2)
Strain <- sample(c("A", "B", "C"), n, replace = TRUE)

Dat1 <- data.frame(ID = rep(ID, times =length(Day)),
                   Day = rep(Day, each = n),
                   Length = round(rnorm(n*2, 140, 20))
                   )

Dat1 <-Dat1[sample(c(1:nrow(Dat1)), nrow(Dat1)),]

Dat2 <- data.frame(ID = rep(ID, times =length(Day)),
                   Day = rep(Day, each = n),
                   Temp = round(rnorm(n*2, 7, 1), 1))


Dat2 <-Dat2[sample(c(1:nrow(Dat2)), nrow(Dat2)),]



Dat3 <- data.frame(ID = ID,
                   Strain = Strain)

```

```{r}
# The first data frame (Dat1) contains information on 
## ID: organism ID
## Day: day of sampling
## Length: length at sampling

str(Dat1)

# The second data frame (Dat2) contains information on 
## ID: organism ID
## Day: day of sampling
## Temp: temperature at sampling

str(Dat2)

```

## in the base package using `merge()`

```{r}

mDat<-merge(Dat1, # data frame to merge
             Dat2, # other data frame to merge
             by = c("ID", "Day")) # merge by variable(s)

str(mDat) # take a look at the object I made

```

Note that you don't need to have the same number of observations (rows) in your two data frames to merge.  Merging can be a great way of labelling your data.  Here's an example:

Consider a data frame with strain information for each of your organism IDs:

```{r}

## ID: organism ID
## Strain: strain of organism

str(Dat3)

```

Note that `Dat1` and `Dat2` each contained 40 observations - one observation for each of 20 IDs made on each of 2 days.

In contrast `Dat3` only has 20 observations - information about the strain for each of 20 IDs.  

By using `merge()`, we can add the strain information to `mDat`:

```{r}

allDat <- merge(mDat, # one data frame
                Dat3, # the other data frame
                by = "ID") # variables to merge by

str(allDat)

```
Now we have our observations labelled by the strain information!


Some things to note:

* if you leave out the `by = ` function totally, R will look for column names that are similar between the two data frames and use that for the merge.

* you can designate that the "merge by" variables have different column names in the two data frames.  This is done with the `by.x = ` and `by.y = ` arguments.  Check `?merge` for more.

* you can control what happens to unmatched columns (e.g. if an ID appeared in only one of the two data frames).  This is done with the `all = `, `all.x = `, and `all.y = ` arguments.  Check `?merge` for more.




## in the dplyr package using `full_join()`

The dplyr package includes the `full_join()` function as another way to merge your data frames

```{r}

library(dplyr) # load dplyr package

mDat<-full_join(Dat1, # data frame to merge
                Dat2, # other data frame to merge
                by = join_by(ID, Day)) # merge by column

str(mDat) # take a look at the object I made

```

Some things to note:

* The `full_join()` function keeps all observations appearing in either data frame.

* The `left_join()` function keeps all observations in the first data frame (`Dat1`) but you will lose any *unmatched* observations in the second data frame (`Dat2`).

* The `right_join()` function keeps all observations in the second data frame (`Dat2`) but you will lose any *unmatched* observations in the first data frame (`Dat1`)

# A final note:

* it's ALWAYS a good idea to check your merged data frame to make sure the merge behaved as you expected.  This can be done by taking a random row in the first file (`Dat1`) and comparing the information for that row (ID and Day) in the second file (`Dat2`) and the merged file (`mDat`). Here is an example:



```{r}

k <- 5 # pick a random row to check.  Let's choose 5! 

Dat1[k,] # looking at the 5th row of the first data frame

indsD2 <- which(Dat2$ID == Dat1$ID[k] & Dat2$Day == Dat1$Day[k]) # which row in Dat2 has the ID and Day from the kth row in Dat1

indsD2 # row with matching data

Dat2[indsD2, ] # matching data

indsMD <- which(mDat$ID == Dat1$ID[k] & mDat$Day == Dat1$Day[k]) # which row in mDat has the ID and Day from the kth row in Dat1

indsMD # row with matching data

mDat[indsMD, ] # matching data

## The length and temperature in the merged data (mDat) match the data in the original data frames (Dat1 & Dat2)


```



