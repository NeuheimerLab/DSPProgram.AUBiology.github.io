---
title: "Data Analysis Handbook"
---

```{r}
#| echo: false

TData<-read.csv("ExampleData.csv", # name of data file
                 header=TRUE) # make sure R sees column names (this is the default)

 #ChlData<-read.csv("Chlorophyll.csv", header=TRUE)
 
#library(palmerpenguins)
#penguins <- na.omit(penguins)

```

# The DSP Program Handbook for Data Analysis {.unnumbered}

## A note on tools:

**In general** we will be encouraging you to do all data analysis skills using a scripted programming language like R.  See ### here for more discussion about this, but in short, a scripted program language will allow you to:  

* keep your analysis separate from the data (and thereby safeguard the data),

* keep a record of all your analysis steps (and thereby more easily find errors, make your methods reproducible and transparent), and 

* allow you to use powerful tools to accomplish your analysis tasks.  


That said, there may be times where you need to do analysis in a spreadsheet editor, like Excel.  You will find the ideas presented below are still relevant.  And if you do need to analyse data in a program like Excel, remember to:  

* keep your analysis separate from your data (e.g. in a separate sheet), and 

* keep a record of all your analysis steps.  This is done by:

  + carefully and completely adding comments explaining your steps, 

  + and ensuring each cell contains only one step/piece of information.

## A note on learning your first programming language:

A bit on strategy when learning any programming language (we'll also cover more strategies in class): **it's important to struggle but not for too long**.  Learning programming means learning computational thinking, or the logic behind breaking a problem down for a computer to solve.  Struggling helps us learn this logic (ensuring we truly see the patterns in the code) but struggling too long can be an energy- and time-waster and may make us lose motivation for the process.  The most successful path forward is a middle way: Read through this document, try to reproduce the examples and try the exercises, but if you've been staring at a problem for hours, it's time to ask for help.  Ask google, ask another R user, ask me, and if you don't understand the answers you are given, ask again.  

**Don't worry about memorizing** the details of this document or our discussions in class.   You will always have reference material available to you (e.g. this document, the class notes, R's help files, the internet). You can let memorization happen organically: Depending on your individual research adventures, you will use some of these tools more often than others and they will likely become committed to memory.  Other tools will prove less useful to you.  Memorizing this latter group would be a waste of time.

## The basics

[Here we will go over essential topics when you're first learning a programming language.](DA_RBasics.qmd). Here we cover:

* installing R 

* scripts 

* basic syntax

* getting help in R (how to read help files!)

* objects and data structures

* etc.


## So you want to...

Here we will provide examples of how to accomplish common data analysis tasks.

### [... load your data into R](SYWT_Import.qmd) 

### [... validate and explore your data](SYWT_Validate.qmd)

### [... visualize your data (make a plot!)](SYWT_Visualize.qmd)

### [... deal with missing values](SYWT_NA.qmd)

### [... sort your data](SYWT_Sort.qmd)

### [... subset your data](SYWT_Subset.qmd) 

### [... work with dates and times](SYWT_DatesTimes.qmd)

### [... transform your data](SYWT_Transform.qmd)

### [... manipulate rows or columns in your data](SYWT_ManipulateRowsColumns.qmd) 

### [... manipulate subsets of rows or columns](SYWT_ManipulateSubsets.qmd) 

### [... merge your data with another data set](SYWT_Merge.qmd)

### [...export your data back out of R](SYWT_Export.qmd)

## [Best practices](DA_BestPractices.qmd)

## [Other topics](DA_OtherTopics.qmd)

