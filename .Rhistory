color = "green", alpha = 0.9
)
p
?reorder_layers
basemap
bm <- basemap(data = dt,
shapefiles = "Europe", rotate = TRUE, bathy.alpha = 0, bathymetry = TRUE)
myBathy<-getNOAA.bathy(lon1=limits["xmin"], # minimum longitude
lon2=limits["xmax"], # maximum longitude
lat1=limits["ymin"], # minimum latitude
lat2=limits["ymax"], # max latitude
resolution=0.25, # resolution of data in degrees
keep=TRUE) # makes a data file on your computer with the data downloaded
myBathy <- raster_bathymetry(stars::st_as_stars(marmap::as.raster(myBathy)),
depths = NULL)
p<-   bm +
stars::geom_stars(data = myBathy$raster) +
ggplot2::scale_fill_gradientn(breaks = seq(from=10,80,10), limits = c(0,NA),
name = "Depth (m)",
colors = colorRampPalette(c("#F7FBFF", "#DEEBF7", "#9ECAE1", "#4292C6", "#08306B"))(8)
) +
geom_spatial_point(
data = data.frame(x = -9.961460, y = 53.598033),
aes(x = x, y = y), size = 2,
color = "green", alpha = 0.9
)
reorder_layers(p)
p
bm +
stars::geom_stars(data = myBathy$raster)
bm
bm <- basemap(data = dt,
limits = c(latMin, latMax, lonMin, lonMax)
shapefiles = "Europe", rotate = TRUE, bathy.alpha = 0, bathymetry = TRUE)
bm <- basemap(data = dt,
limits = c(latMin, latMax, lonMin, lonMax),
shapefiles = "Europe", rotate = TRUE, bathy.alpha = 0, bathymetry = TRUE)
bm
latMin
bm <- basemap(data = dt,
limits = c(lonMin, lonMax, latMin, latMax),
shapefiles = "Europe", rotate = TRUE, bathy.alpha = 0, bathymetry = TRUE)
bm
bm <- basemap(
#data = dt,
limits = c(lonMin, lonMax, latMin, latMax),
shapefiles = "Europe", rotate = TRUE, bathy.alpha = 0, bathymetry = TRUE)
bm
bm <- basemap(
#data = dt,
limits = c(lonMin, lonMax, latMin, latMax),
shapefiles = "Europe", rotate = TRUE, bathymetry = TRUE)
bm
bm <- basemap(data = dt,
limits = c(lonMin, lonMax, latMin, latMax),
shapefiles = "Europe", rotate = TRUE, bathymetry = TRUE)
bm
bm +
stars::geom_stars(data = myBathy$raster)
bm <- basemap(data = dt,
limits = c(lonMin, lonMax, latMin, latMax),
shapefiles = "Europe", rotate = TRUE)
bm +
stars::geom_stars(data = myBathy$raster)
bm <- basemap(
#data = dt,
limits = c(lonMin, lonMax, latMin, latMax),
shapefiles = "Europe", rotate = TRUE)
myBathy<-getNOAA.bathy(lon1=limits["xmin"], # minimum longitude
lon2=limits["xmax"], # maximum longitude
lat1=limits["ymin"], # minimum latitude
lat2=limits["ymax"], # max latitude
resolution=0.25, # resolution of data in degrees
keep=TRUE) # makes a data file on your computer with the data downloaded
myBathy <- raster_bathymetry(stars::st_as_stars(marmap::as.raster(myBathy)),
depths = NULL)
p<-   bm +
stars::geom_stars(data = myBathy$raster) +
ggplot2::scale_fill_gradientn(breaks = seq(from=10,80,10), limits = c(0,NA),
name = "Depth (m)",
colors = colorRampPalette(c("#F7FBFF", "#DEEBF7", "#9ECAE1", "#4292C6", "#08306B"))(8)
) +
geom_spatial_point(
data = data.frame(x = -9.961460, y = 53.598033),
aes(x = x, y = y), size = 2,
color = "green", alpha = 0.9
)
reorder_layers(p)
bm +
stars::geom_stars(data = myBathy$raster)
ggplot()+stars::geom_stars(data = myBathy$raster)
bm +
stars::geom_stars(data = myBathy$raster) +
ggplot2::scale_fill_gradientn(breaks = seq(from=10,80,10), limits = c(0,NA),
name = "Depth (m)",
colors = colorRampPalette(c("#F7FBFF", "#DEEBF7", "#9ECAE1", "#4292C6", "#08306B"))(8)
) +
geom_spatial_point(
data = data.frame(x = -9.961460, y = 53.598033),
aes(x = x, y = y), size = 2,
color = "green", alpha = 0.9
)
rm(list = ls())
library(ggOceanMaps)
library(marmap)
library(stars)
library(ggspatial)
library(sf)
lonMin <- -10.2
lonMax <- -9.8 # longitude limits, in decimal degrees E
latMin <- 53.4
latMax <- 53.8 # longitude limits in decimal degrees N
dt <- data.frame(lon = c(-10.2, -10.2, -9.8, -9.8), lat = c(53.4, 53.8, 53.8, 53.4))
limits <- auto_limits(dt, expand.factor = 1.1, proj.out = 4326)$projLimits
bm <- basemap(data = dt,
limits = c(lonMin, lonMax, latMin, latMax),
shapefiles = "Europe", rotate = TRUE)
myBathy<-getNOAA.bathy(lon1=limits["xmin"], # minimum longitude
lon2=limits["xmax"], # maximum longitude
lat1=limits["ymin"], # minimum latitude
lat2=limits["ymax"], # max latitude
resolution=0.25, # resolution of data in degrees
keep=TRUE) # makes a data file on your computer with the data downloaded
myBathy <- raster_bathymetry(stars::st_as_stars(marmap::as.raster(myBathy)),
depths = NULL)
p<-   bm +
stars::geom_stars(data = myBathy$raster) +
ggplot2::scale_fill_gradientn(breaks = seq(from=10,80,10), limits = c(0,NA),
name = "Depth (m)",
colors = colorRampPalette(c("#F7FBFF", "#DEEBF7", "#9ECAE1", "#4292C6", "#08306B"))(8)
) +
geom_spatial_point(
data = data.frame(x = -9.961460, y = 53.598033),
aes(x = x, y = y), size = 2,
color = "green", alpha = 0.9
)
reorder_layers(p)
p
ggplot()+
stars::geom_stars(data = myBathy$raster)
ggplot()+
stars::geom_stars(data = myBathy$raster) +
geom_spatial_point(
data = data.frame(x = -9.961460, y = 53.598033),
aes(x = x, y = y), size = 2,
color = "green", alpha = 0.9
)
bm +
stars::geom_stars(data = myBathy$raster) +
ggplot2::scale_fill_gradientn(breaks = seq(from=10,80,10), limits = c(0,NA),
name = "Depth (m)",
colors = colorRampPalette(c("#F7FBFF", "#DEEBF7", "#9ECAE1", "#4292C6", "#08306B"))(8)
) +
geom_spatial_point(
data = data.frame(x = -9.961460, y = 53.598033),
aes(x = x, y = y), size = 2,
color = "green", alpha = 0.9
)
library(marmap); library(stars); library(sf)
dt <- data.frame(lon = c(-125, -125, -111, -111), lat = c(28, 37, 37, 28))
basemap(data = dt, bathymetry = TRUE, bathy.style = "rcb")
limits <- auto_limits(dt, expand.factor = 1.1)$projLimits
bm <- basemap(data = dt)
mar_bathy <- marmap::getNOAA.bathy(lon1 = limits["xmin"], lon2 = limits["xmax"], lat1 = limits["ymin"], lat2 = limits["ymax"])
#> Querying NOAA database ...
#> This may take seconds to minutes, depending on grid size
#> Building bathy matrix ...
bathy <- raster_bathymetry(stars::st_as_stars(marmap::as.raster(mar_bathy)), depths = NULL)
p <- bm +
stars::geom_stars(data = bathy$raster) +
ggplot2::scale_fill_gradientn(
name = "Depth (m)", breaks = seq(0,5e3,1e3), limits = c(0,NA),
colors = colorRampPalette(c("#F7FBFF", "#DEEBF7", "#9ECAE1", "#4292C6", "#08306B"))(8)
)
p
reorder_layers(p)
rm(list = ls())
library(ggOceanMaps)
library(marmap)
library(stars)
library(ggspatial)
library(sf)
lonMin <- -10.2
lonMax <- -9.8 # longitude limits, in decimal degrees E
latMin <- 53.4
latMax <- 53.8 # longitude limits in decimal degrees N
dt <- data.frame(lon = c(-10.2, -10.2, -9.8, -9.8), lat = c(53.4, 53.8, 53.8, 53.4))
limits <- auto_limits(dt, expand.factor = 1.1, proj.out = 4326)$projLimits
bm <- basemap(data = dt,
limits = c(lonMin, lonMax, latMin, latMax),
# shapefiles = "Europe",
rotate = TRUE)
myBathy<-getNOAA.bathy(lon1=limits["xmin"], # minimum longitude
lon2=limits["xmax"], # maximum longitude
lat1=limits["ymin"], # minimum latitude
lat2=limits["ymax"], # max latitude
resolution=0.25, # resolution of data in degrees
keep=TRUE) # makes a data file on your computer with the data downloaded
myBathy <- raster_bathymetry(stars::st_as_stars(marmap::as.raster(myBathy)),
depths = NULL)
p<-   bm +
stars::geom_stars(data = myBathy$raster) +
ggplot2::scale_fill_gradientn(breaks = seq(from=10,80,10), limits = c(0,NA),
name = "Depth (m)",
colors = colorRampPalette(c("#F7FBFF", "#DEEBF7", "#9ECAE1", "#4292C6", "#08306B"))(8)
) +
geom_spatial_point(
data = data.frame(x = -9.961460, y = 53.598033),
aes(x = x, y = y), size = 2,
color = "green", alpha = 0.9
)
reorder_layers(p)
rm(list = ls())
library(ggOceanMaps)
library(marmap)
library(stars)
library(ggspatial)
library(sf)
lonMin <- -10.2
lonMax <- -9.8 # longitude limits, in decimal degrees E
latMin <- 53.4
latMax <- 53.8 # longitude limits in decimal degrees N
dt <- data.frame(lon = c(-10.2, -10.2, -9.8, -9.8), lat = c(53.4, 53.8, 53.8, 53.4))
limits <- auto_limits(dt, expand.factor = 1.1, proj.out = 4326)$projLimits
bm <- basemap(data = dt,
limits = c(lonMin, lonMax, latMin, latMax),
shapefiles = "Europe",
rotate = TRUE)
myBathy<-getNOAA.bathy(lon1=lonMin, # minimum longitude
lon2=lonMax, # maximum longitude
lat1=latMin, # minimum latitude
lat2=latMax, # max latitude
resolution=0.25, # resolution of data in degrees
keep=TRUE) # makes a data file on your computer with the data downloaded
myBathy <- raster_bathymetry(stars::st_as_stars(marmap::as.raster(myBathy)),
depths = NULL)
p<-   bm +
stars::geom_stars(data = myBathy$raster) +
ggplot2::scale_fill_gradientn(breaks = seq(from=10,80,10), limits = c(0,NA),
name = "Depth (m)",
colors = colorRampPalette(c("#F7FBFF", "#DEEBF7", "#9ECAE1", "#4292C6", "#08306B"))(8)
) +
geom_spatial_point(
data = data.frame(x = -9.961460, y = 53.598033),
aes(x = x, y = y), size = 2,
color = "green", alpha = 0.9
)
reorder_layers(p)
ggplot()+
stars::geom_stars(data = myBathy$raster) +
geom_spatial_point(
data = data.frame(x = -9.961460, y = 53.598033),
aes(x = x, y = y), size = 2,
color = "green", alpha = 0.9
)
p<-   bm +
stars::geom_stars(data = myBathy$raster) +
ggplot2::scale_fill_gradientn(breaks = seq(from=80,to=10, by=10), limits = c(0,NA),
name = "Depth (m)",
colors = colorRampPalette(c("#F7FBFF", "#DEEBF7", "#9ECAE1", "#4292C6", "#08306B"))(8)
) +
geom_spatial_point(
data = data.frame(x = -9.961460, y = 53.598033),
aes(x = x, y = y), size = 2,
color = "green", alpha = 0.9
)
p<-   bm +
stars::geom_stars(data = myBathy$raster) +
ggplot2::scale_fill_gradientn(breaks = seq(from=80,to=10, by=-10), limits = c(0,NA),
name = "Depth (m)",
colors = colorRampPalette(c("#F7FBFF", "#DEEBF7", "#9ECAE1", "#4292C6", "#08306B"))(8)
) +
geom_spatial_point(
data = data.frame(x = -9.961460, y = 53.598033),
aes(x = x, y = y), size = 2,
color = "green", alpha = 0.9
)
p
bm
ggplot()+
stars::geom_stars(data = myBathy$raster) +
geom_spatial_point(
data = data.frame(x = -9.961460, y = 53.598033),
aes(x = x, y = y), size = 2,
color = "green", alpha = 0.9
)+
##### ------
library(marmap); library(stars); library(sf)
ggplot()+
stars::geom_stars(data = myBathy$raster) +
geom_spatial_point(
data = data.frame(x = -9.961460, y = 53.598033),
aes(x = x, y = y), size = 2,
color = "green", alpha = 0.9
)
ggplot()+
stars::geom_stars(data = myBathy$raster) +
ggplot2::scale_fill_gradientn(breaks = seq(from=80,to=10, by=-10), limits = c(0,NA),
name = "Depth (m)",
colors = colorRampPalette(c("#F7FBFF", "#DEEBF7", "#9ECAE1", "#4292C6", "#08306B"))(8)
) +
geom_spatial_point(
data = data.frame(x = -9.961460, y = 53.598033),
aes(x = x, y = y), size = 2,
color = "green", alpha = 0.9
)
ggplot()+
stars::geom_stars(data = myBathy$raster) +
ggplot2::scale_fill_gradientn(breaks = seq(from=60,to=10, by=-10), limits = c(0,NA),
name = "Depth (m)",
colors = colorRampPalette(c("#F7FBFF", "#DEEBF7", "#9ECAE1", "#4292C6", "#08306B"))(8)
) +
geom_spatial_point(
data = data.frame(x = -9.961460, y = 53.598033),
aes(x = x, y = y), size = 2,
color = "green", alpha = 0.9
)
ggplot()+
stars::geom_stars(data = myBathy$raster) +
ggplot2::scale_fill_gradientn(breaks = seq(from=80,to=10, by=-10), limits = c(0,NA),
name = "Depth (m)",
colors = colorRampPalette(c("#F7FBFF", "#DEEBF7", "#9ECAE1", "#4292C6", "#08306B"))(8)
) +
geom_spatial_point(
data = data.frame(x = -9.961460, y = 53.598033),
aes(x = x, y = y), size = 2,
color = "green", alpha = 0.9
)
ggplot()+
stars::geom_stars(data = myBathy$raster) +
ggplot2::scale_fill_gradientn(breaks = seq(from=60,to=10, by=-10), limits = c(0,NA),
name = "Depth (m)",
colors = colorRampPalette(c("#F7FBFF", "#DEEBF7", "#9ECAE1", "#4292C6", "#08306B"))(8)
) +
geom_spatial_point(
data = data.frame(x = -9.961460, y = 53.598033),
aes(x = x, y = y), size = 2,
color = "green", alpha = 0.9
)
ggplot()+
stars::geom_stars(data = myBathy$raster) +
ggplot2::scale_fill_gradientn(breaks = seq(from=80,to=10, by=-10), limits = c(0,NA),
name = "Depth (m)",
colors = colorRampPalette(c("#F7FBFF", "#DEEBF7", "#9ECAE1", "#4292C6", "#08306B"))(8)
) +
geom_spatial_point(
data = data.frame(x = -9.961460, y = 53.598033),
aes(x = x, y = y), size = 2,
color = "green", alpha = 0.9
)+ylim(53.55, 53.65)
ggplot()+
stars::geom_stars(data = myBathy$raster) +
ggplot2::scale_fill_gradientn(breaks = seq(from=80,to=10, by=-10), limits = c(0,NA),
name = "Depth (m)",
colors = colorRampPalette(c("#F7FBFF", "#DEEBF7", "#9ECAE1", "#4292C6", "#08306B"))(8)
) +
geom_spatial_point(
data = data.frame(x = -9.961460, y = 53.598033),
aes(x = x, y = y), size = 2,
color = "green", alpha = 0.9
)+ylim(53.55, 53.65)+xlim(-10.1,-9.9)
gg<- c("trwe, fjir, tijogt")
strsplit(gg, ",")
gg<- c("one thing, another, a third")
strsplit(gg, ",")
setwd("/Users/au285670/Library/CloudStorage/OneDrive-Aarhusuniversitet/HOME/AU/Service/2021_02_DigitalCompetenciesTaskforce/Chapter02/DSP_Rmd_Handbook/DSPHandbook_Quarto/DSPHandbook_QuartoGithub")
list.files()
setwd("~/Library/CloudStorage/OneDrive-Aarhusuniversitet/HOME/AU/Service/2021_02_DigitalCompetenciesTaskforce/Chapter02/DSP_Rmd_Handbook/DSPHandbook_Quarto/DSPHandbook_QuartoGithub")
setwd("/Users/au285670/Library/CloudStorage/OneDrive-Aarhusuniversitet/HOME/AU/Service/2021_02_DigitalCompetenciesTaskforce/Chapter02/DSP_Rmd_Handbook/DSPHandbook_Quarto/DSPHandbook_QuartoGithub/DSPProgramHandbook.AUBiology.github.io")
list.files()
renv::status()
?renv::status()
install.packages("matrix")
install.packages("Matrix")
library(Matrix)
library(car)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
install.packages("carData")
library(carData)
?vof
?vif
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE,
eval = TRUE)
# Load packages
library(tidyverse)
library(png)
fNP <- 0.3 # fraction of PP that is nanophytoplankton
PtoB <- 12 # production/biomass ratio (/day)
PP <- 600  # net primary production (PP) in mgC/m2/day
TE <- 0.35 # transfer efficiency, dimensionless
(prodNP <- PP*fNP) # production of nanophytoplankton
(prodMP <- PP*(1-fNP)) # production of microphytoplankton
(prodMZ <- prodMP*TE) # production of microzooplankton
(prodC <- (prodMP*TE) + (prodMZ*TE)) # production of the copepods
(biomC <- prodC/PtoB) # biomass of the copepods
depth <- 22 # depth of the mixed layer (m)
carbInd <- 0.00017 # carbon in an individual copepod (mgC per copepod)
indC.m2 <- biomC/carbInd # number of copepods per m2
indC.m3 <- indC.m2/depth # number of copepods per m3
(indC.L <- indC.m3/1000) # number of copepods in ind/L
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE,
eval = TRUE)
# Load packages
library(tidyverse)
library(png)
fNP <- 0.3 # fraction of PP that is nanophytoplankton
PtoB <- 12 # production/biomass ratio (/day)
PP <- 2000  # net primary production (PP) in mgC/m2/day
TE <- 0.35 # transfer efficiency, dimensionless
(prodNP <- PP*fNP) # production of nanophytoplankton
(prodMP <- PP*(1-fNP)) # production of microphytoplankton
(prodMZ <- prodMP*TE) # production of microzooplankton
(prodC <- (prodMP*TE) + (prodMZ*TE)) # production of the copepods
(biomC <- prodC/PtoB) # biomass of the copepods
depth <- 22 # depth of the mixed layer (m)
carbInd <- 0.00017 # carbon in an individual copepod (mgC per copepod)
indC.m2 <- biomC/carbInd # number of copepods per m2
indC.m3 <- indC.m2/depth # number of copepods per m3
(indC.L <- indC.m3/1000) # number of copepods in ind/L
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE,
eval = TRUE)
# Load packages
library(tidyverse)
library(png)
fNP <- 0.3 # fraction of PP that is nanophytoplankton
PtoB <- 12 # production/biomass ratio (/day)
PP <- 2000  # net primary production (PP) in mgC/m2/day
TE <- 0.35 # transfer efficiency, dimensionless
(prodNP <- PP*fNP) # production of nanophytoplankton
(prodMP <- PP*(1-fNP)) # production of microphytoplankton
(prodMZ <- prodMP*TE) # production of microzooplankton
(prodC <- (prodMP*TE) + (prodMZ*TE)) # production of the copepods
(biomC <- prodC/PtoB) # biomass of the copepods
depth <- 50 # depth of the mixed layer (m)
carbInd <- 0.00017 # carbon in an individual copepod (mgC per copepod)
indC.m2 <- biomC/carbInd # number of copepods per m2
indC.m3 <- indC.m2/depth # number of copepods per m3
(indC.L <- indC.m3/1000) # number of copepods in ind/L
depth <- 10 # depth of the mixed layer (m)
carbInd <- 0.00017 # carbon in an individual copepod (mgC per copepod)
indC.m2 <- biomC/carbInd # number of copepods per m2
indC.m3 <- indC.m2/depth # number of copepods per m3
(indC.L <- indC.m3/1000) # number of copepods in ind/L
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE,
eval = TRUE)
# Load packages
library(tidyverse)
library(png)
fNP <- 0.3 # fraction of PP that is nanophytoplankton
PtoB <- 12 # production/biomass ratio (/day)
PP <- 2000  # net primary production (PP) in mgC/m2/day
TE <- 0.35 # transfer efficiency, dimensionless
(prodNP <- PP*fNP) # production of nanophytoplankton
(prodMP <- PP*(1-fNP)) # production of microphytoplankton
(prodMZ <- prodMP*TE) # production of microzooplankton
(prodC <- (prodMP*TE) + (prodMZ*TE)) # production of the copepods
(biomC <- prodC/PtoB) # biomass of the copepods
depth <- 10 # depth of the mixed layer (m)
carbInd <- 0.00017 # carbon in an individual copepod (mgC per copepod)
indC.m2 <- biomC/carbInd # number of copepods per m2
indC.m3 <- indC.m2/depth # number of copepods per m3
(indC.L <- indC.m3/1000) # number of copepods in ind/L
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE,
eval = TRUE)
# Load packages
library(tidyverse)
library(png)
fNP <- 0.3 # fraction of PP that is nanophytoplankton
PtoB <- 12 # production/biomass ratio (/day)
PP <- 2000  # net primary production (PP) in mgC/m2/day
TE <- 0.35 # transfer efficiency, dimensionless
(prodNP <- PP*fNP) # production of nanophytoplankton
(prodMP <- PP*(1-fNP)) # production of microphytoplankton
(prodMZ <- prodMP*TE) # production of microzooplankton
(prodC <- (prodMP*TE) + (prodMZ*TE)) # production of the copepods
(biomC <- prodC/PtoB) # biomass of the copepods
depth <- 22 # depth of the mixed layer (m)
carbInd <- 0.00017 # carbon in an individual copepod (mgC per copepod)
indC.m2 <- biomC/carbInd # number of copepods per m2
indC.m3 <- indC.m2/depth # number of copepods per m3
(indC.L <- indC.m3/1000) # number of copepods in ind/L
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE,
eval = TRUE)
# Load packages
library(tidyverse)
library(png)
fNP <- 0.8 # fraction of PP that is nanophytoplankton
PtoB <- 12 # production/biomass ratio (/day)
PP <- 2000  # net primary production (PP) in mgC/m2/day
TE <- 0.35 # transfer efficiency, dimensionless
(prodNP <- PP*fNP) # production of nanophytoplankton
(prodMP <- PP*(1-fNP)) # production of microphytoplankton
(prodMZ <- prodMP*TE) # production of microzooplankton
(prodC <- (prodMP*TE) + (prodMZ*TE)) # production of the copepods
(biomC <- prodC/PtoB) # biomass of the copepods
depth <- 22 # depth of the mixed layer (m)
carbInd <- 0.00017 # carbon in an individual copepod (mgC per copepod)
indC.m2 <- biomC/carbInd # number of copepods per m2
indC.m3 <- indC.m2/depth # number of copepods per m3
(indC.L <- indC.m3/1000) # number of copepods in ind/L
